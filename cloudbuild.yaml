substitutions:
  _APPLY_CHANGES: 'false'
  _ENV: 'undefined'
steps:
- id: 'context'
name: 'alpine'
entrypoint: 'sh'
args:
- '-c'
- |
    echo "***********************"
    echo "project : $PROJECT_ID"
    echo "branch  : $BRANCH_NAME"
    echo "env     : ${_ENV}"
    echo "mode    : $([[ ${_APPLY_CHANGES} = 'true' ]] && echo 'LIVE' || echo 'DRY RUN')"
    echo "***********************"
- id: 'terraform init'
name: 'hashicorp/terraform:latest'
entrypoint: 'sh'
args:
- '-c'
- |
    cd environments/${_ENV}
    TF_IN_AUTOMATION=1 terraform init -input=false
- id: 'terraform plan'
name: 'hashicorp/terraform:latest'
entrypoint: 'sh'
args:
- '-c'
- |
    cd environments/${_ENV}
    TF_IN_AUTOMATION=1 terraform plan -input=false -out changes.tfplan
- id: 'terraform apply'
name: 'hashicorp/terraform:latest'
entrypoint: 'sh'
args:
- '-c'
- |
    if [ "${_APPLY_CHANGES}" = 'true' ]; then
      echo "*****************************************"
      echo "Applying changes on live environment"
      echo "*****************************************"
      cd environments/${_ENV}
      TF_IN_AUTOMATION=1 terraform apply -input=false -auto-approve changes.tfplan
    else
      echo "*****************************************"
      echo "Skipping apply (DRY RUN)"
      echo "*****************************************"
    fi
logsBucket: "gs://${PROJECT_ID}-gcs-cloud-build-logs/"
options:
logging: GCS_ONLY